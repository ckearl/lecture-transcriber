import pydantic
import datetime
from typing import List, Optional

class LectureMetadata(pydantic.BaseModel):
    id: str
    title: str
    professor: str
    date: datetime.date
    duration_seconds: int
    class_number: str
    language: str


class Speaker(pydantic.BaseModel):
    lecture_id: str
    speaker_name: str
    speaker_order: int


class TimestampSegment(pydantic.BaseModel):
    # 'id' is generated by the DB, so we don't need it in the fetch model unless specifically queried
    lecture_id: str
    start_time: float
    end_time: float
    text: str
    speaker_name: Optional[str] = None
    segment_order: int


class TextBody(pydantic.BaseModel):
    lecture_id: str
    text: str


class TextInsights(pydantic.BaseModel):
    lecture_id: str
    summary: str
    key_terms: List[str]
    main_ideas: List[str]
    review_questions: List[str]


class CompleteLecture(pydantic.BaseModel):
    """A comprehensive model that combines all lecture components."""
    metadata: LectureMetadata
    speakers: List[Speaker]
    segments: List[TimestampSegment]
    full_text: TextBody
    insights: TextInsights